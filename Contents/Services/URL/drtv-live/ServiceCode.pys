####################################################################################################
def MetadataObjectForURL(url):
    if 'dr01' in url:
      slug = 'dr1'
      thumb = R('icon-channel-dr1.png')
    elif 'dr02' in url:
      slug = 'dr2'
      thumb = R('icon-channel-dr2.png')
    elif 'dr03' in url:
      slug = 'dr3'
      thumb = R('icon-channel-dr3.png')
    elif 'dr05' in url:
      slug = 'dr-ramasjang'
      thumb =  R('icon-channel-ramasjang.png')
    elif 'dr04' in url:
      slug = 'dr-k'
      thumb = R('icon-channel-drk.png')
    elif 'dr06' in url:
      slug = 'dr-ultra'
      thumb = R('icon-channel-ultra.png')
    else:
      slug = 'dr1'
      thumb = R('icon-default.png')

    now = JSON.ObjectFromURL('http://www.dr.dk/TV/api/live/info/'+slug+'/json').get('Now')

    return VideoClipObject(
        title = now.get('Title', ''),
        summary = now.get('Description', ''),
        thumb = thumb)


####################################################################################################
def MediaObjectsForURL(url):
    return [
      MediaObject(
                  parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url = url, platform = Client.Platform)))],
                  container = Container.MP4,
                  video_codec = VideoCodec.H264,
                  audio_codec = AudioCodec.AAC,
                  optimized_for_streaming = True,
                  audio_channels = 2
      )
    ]

def PlayVideo(url, platform):
    original_url = url
    original_playlist = HTTP.Request(url).content

    url = url[:url.rindex("/")]

    new_playlist = RegeneratePlaylist(original_playlist.splitlines(), url)

    if platform == ClientPlatform.iOS:
        return Redirect(original_url)
    else:
        return new_playlist


def RegeneratePlaylist(playlist, url):
    new_playlist = ''
    for line in playlist:
        if not line.startswith('http') and not line.startswith('#'):
            new_playlist = new_playlist + url + '/' + line
        else:
            new_playlist = new_playlist + line

        new_playlist = new_playlist + '\n'

    return new_playlist


####################################################################################################
def NormalizeURL(url):
    return url
