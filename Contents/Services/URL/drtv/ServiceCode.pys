API_BASE_URL = 'http://www.dr.dk/nu/api'

THUMB_WIDTH = '300'
THUMB_HEIGHT = '150'

BANDWIDTH_PATTERN = Regex('#EXT.*BANDWIDTH=([0-9]+)')

####################################################################################################
def MetadataObjectForURL(url):

    # Request the URL
    item = JSON.ObjectFromURL(url, cacheTime=7200)

    # Extract the details available directly form the page.
    title = item['title']
    description = item['description']
    #thumb = API_BASE_URL+'programseries/'+item['programSerieSlug']+'/images/'+THUMB_WIDTH+'x'+THUMB_HEIGHT+'.jpg'

    thumb = 'http://www.dr.dk/nu-mobil/nuapi/videos/'+item['id']+'/images/'+THUMB_WIDTH+'x'+THUMB_HEIGHT+'.jpg'

    return VideoClipObject(
        title = title,
        summary = description,
        thumb = thumb)

####################################################################################################
def MediaObjectsForURL(url):
    return [
      MediaObject(
                  parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url = url, quality = 'high', platform = Client.Platform)))],
                  container = Container.MP4,
                  video_codec = VideoCodec.H264,
                  audio_codec = AudioCodec.AAC,
                  optimized_for_streaming = True,
                  audio_channels = 2,
                  video_resolution = '720'
      ),
      MediaObject(
                  parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url = url, quality = 'medium', platform = Client.Platform)))],
                  container = Container.MP4,
                  video_codec = VideoCodec.H264,
                  audio_codec = AudioCodec.AAC,
                  optimized_for_streaming = True,
                  audio_channels = 2,
                  video_resolution = '480'
      ),
      MediaObject(
                  parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url = url, quality = 'low', platform = Client.Platform)))],
                  container = Container.MP4,
                  video_codec = VideoCodec.H264,
                  audio_codec = AudioCodec.AAC,
                  optimized_for_streaming = True,
                  audio_channels = 2,
                  video_resolution = '360'
      )
    ]

##
# For some reason Client.Platform doesn't work in here (maybe because it is an callback?) so
# we pass the platform as parameter.
##
def PlayVideo(url, quality, platform):
    try:
        item = JSON.ObjectFromURL(url)
    except:
        return None

    url = item['streams'][quality]

    original_playlist = HTTP.Request(url).content

    url = url[:url.rindex("/")]

    new_playlist = RegeneratePlaylist(original_playlist.splitlines(), url)

    if platform == ClientPlatform.iOS:
        return Redirect(item['streams'][quality])
    else:
        return new_playlist

def RegeneratePlaylist(playlist, url):
    new_playlist = ''
    for line in playlist:
        if not line.startswith('http') and not line.startswith('#'):
            new_playlist = new_playlist + url + '/' + line
        else:
            new_playlist = new_playlist + line

        new_playlist = new_playlist + '\n'

    return new_playlist


####################################################################################################
def NormalizeURL(url):
    return url